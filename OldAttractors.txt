#include<SFML/Graphics.hpp>
#include<cmath>
#include<random>
#include<iostream>
#include<iomanip>
#include<vector>
#include<array>
#include<algorithm>
#include<thread>
#include<SafeContainers.hpp>
#include<initializer_list>
#include<memory>
#include"myrand.hpp"
constexpr double radius = 10;
const double gravity_constant = 1e-5;
const double minerror = 1e-1;

//#define vertex_lock

constexpr std::vector<std::vector<std::pair<std::size_t, std::size_t>>> round_robin(std::size_t teams) {
    std::size_t rounds = teams - 1;
    std::size_t mpr = teams / 2;

    std::vector<std::size_t> t(teams);
    for (std::size_t i = 0; i < teams; ++i) {
        t[i] = i;
    }

    std::vector<std::vector<std::pair<std::size_t, std::size_t>>> matches(rounds, std::vector<std::pair<std::size_t, std::size_t>>(mpr));
    for (std::size_t r = 0; r < rounds; ++r) {
        for (std::size_t m = 0; m < mpr; ++m) {
            matches[r][m] = std::make_pair(t[m], t[teams - m -1]);
        }
        t.erase(std::find(t.begin(), t.end(), rounds - r ));
        t.insert(t.begin() + 1, rounds - r);
    }

    matches.push_back({});
    matches[matches.size() - 1].resize(teams);
    for (std::size_t i = 0; i < teams; ++i) {
        matches[matches.size() - 1][i] = std::pair<std::size_t, std::size_t> (i,i);
    }
    return matches;
}

typedef sf::Vector2<double> Vector2d;

class Particles : public sf::Drawable, public sf::Transformable 
{
public:
    Particles(sf::PrimitiveType pt, std::size_t size):
        vertexes(pt,size)
        ,vertex_count(size)
    {
        vertexes.resize(size);
        vertexes_copy->resize(size);
        p_position.resize(size, {{0},{0}});
        p_speed.resize(size, {{0},{0}});
    }

    Particles(sf::PrimitiveType pt):
        Particles(pt,0)
    {};

protected:
    std::size_t vertex_count;
    sf::VertexArray vertexes;
    //to get around stupid const
    const std::unique_ptr<sf::VertexArray> vertexes_copy{ new sf::VertexArray() };
    std::vector<Vector2d> p_position;
    std::vector<Vector2d> p_speed;

    const std::unique_ptr<std::mutex> position_mutex{new std::mutex()};

    virtual void draw(sf::RenderTarget& target, sf::RenderStates states) const
    {

        for (std::size_t i = 0; i < vertex_count; ++i) {
            (*vertexes_copy)[i].position.x = p_position[i].x;
            (*vertexes_copy)[i].position.y = p_position[i].y;
        }

        states.transform *= getTransform();

        // our particles don't use a texture
        states.texture = NULL;

        // draw the vertex array
        //target.draw(*vertexes_copy, states);
        //change p_position to ptr
        target.draw(*vertexes_copy, states);
    }
private:
};

template<typename f>
constexpr f distance(const sf::Vector2<f> v, const sf::Vector2<f> w) {
    const f dx = w.x - v.x;
    const f dy = w.y - v.y;
    return std::sqrt(dx * dx + dy * dy);
}

template<typename f>
constexpr f distance_squared(const sf::Vector2<f> v, const sf::Vector2<f> w) {
    const f dx = w.x - v.x;
    const f dy = w.y - v.y;
    return dx * dx + dy * dy;
}

template<typename f>
constexpr sf::Vector2<f> inverse_square_on_second(const sf::Vector2<f> v, const sf::Vector2<f> w, f error = { 1 }) {
    const f dx = w.x - v.x;
    const f dy = w.y - v.y;
    if (dx == 0 && dy == 0) return { {0},{0} };
    const f distance = std::sqrt(dx * dx + dy * dy);
    if (distance > error) {
        const f cubed = distance * distance * distance;
        return { dx / cubed, dy / cubed };
    }
    return { dx / distance, dy / distance };
}

template<typename f>
constexpr sf::Vector2<f> inverse_square_on_second_nobranch(const sf::Vector2<f> v, const sf::Vector2<f> w, f error = minerror) {
    const f dx = w.x - v.x;
    const f dy = w.y - v.y;
    if (dx == 0 && dy == 0) return { {0},{0} };
    const f distance = std::sqrt(dx * dx + dy * dy+error);
    const f cubed = distance * distance * distance;
    return { dx / cubed, dy / cubed };
}

template<typename f, typename d>
constexpr sf::Vector2<f> normalize_on_second(const sf::Vector2<f> v, const sf::Vector2<f> w, d dist) {
    const f dx = w.x - v.x;
    const f dy = w.y - v.y;
    return { static_cast<f>(dx / dist), static_cast<f>(dy / dist) };
}
struct Point {
    Vector2d& position;
    Vector2d& speed;
    const double mass{ 1 };
    Point(Vector2d& position, Vector2d& speed, double mass)
        :position(position), speed(speed), mass(mass) {};
};

enum class type {
    classic,
    probabilistic
};

struct attractor {
    const double gravity_constant = 1.e-5;
    const double minstd_rand_max = std::minstd_rand::max();
    const type t;

    attractor(type t) :
        t(t) 
    {
        /*std::random_device rd{};
        auto seed = rd();
        std::cout << "Seed=" << seed<<"\n";
        gen.seed(seed);
        gen.seed(1607590604llu);
        std::cout << "Actual seed=1607590604llu\n";*/
    };

    void operator()(Point& p1, Point& p2, double const& re = { 0 }) const {
        switch (t) {
        case type::classic:
            classic_gravity(p1, p2, 1);
            break;
        case type::probabilistic:
            probabilistic_gravity(p1, p2, re);
            break;
        }
    };

    void probabilistic_gravity_fastrand(Point& p1, Point& p2, double const& rand_numb)  const {
        double d = distance_squared(p1.position, p2.position);
        if (rand_numb * d < 1) {
            auto acceleration = normalize_on_second(p1.position, p2.position, std::sqrt(d));
            acceleration.x *= gravity_constant;
            acceleration.y *= gravity_constant;
            p2.speed.x -= acceleration.x * p1.mass;
            p2.speed.y -= acceleration.y * p1.mass;
            p1.speed.x += acceleration.x * p2.mass;
            p1.speed.y += acceleration.y * p2.mass;
        }
    }

    void probabilistic_gravity_64(Point& p1, Point& p2, double const& rand_numb)  const {
        double d = distance_squared(p1.position, p2.position);
        const double max64 = 18446744073709551615.;
        if (rand_numb * d < max64) {
            auto acceleration = normalize_on_second(p1.position, p2.position, std::sqrt(d));
            acceleration.x *= gravity_constant;
            acceleration.y *= gravity_constant;
            p2.speed.x -= acceleration.x * p1.mass;
            p2.speed.y -= acceleration.y * p1.mass;
            p1.speed.x += acceleration.x * p2.mass;
            p1.speed.y += acceleration.y * p2.mass;
        }
    }

    void classic_gravity(Point& p1, Point& p2, const double& min_distance) const {
        Vector2d inversesquare = inverse_square_on_second(p1.position, p2.position, min_distance);
        inversesquare.x *= gravity_constant;
        inversesquare.y *= gravity_constant;
        p2.speed.x -= inversesquare.x * p1.mass;
        p2.speed.y -= inversesquare.y * p1.mass;
        p1.speed.x += inversesquare.x * p2.mass;
        p1.speed.y += inversesquare.y * p2.mass;
    }

    void classic_gravity_nobranch(Point& p1, Point& p2) const {
        Vector2d inversesquare = inverse_square_on_second_nobranch(p1.position, p2.position);
        inversesquare.x *= gravity_constant;
        inversesquare.y *= gravity_constant;
        p2.speed.x -= inversesquare.x * p1.mass;
        p2.speed.y -= inversesquare.y * p1.mass;
        p1.speed.x += inversesquare.x * p2.mass;
        p1.speed.y += inversesquare.y * p2.mass;
    }

    long long unsigned int success = 0;
    long long unsigned int total = 0;

    void probabilistic_gravity(Point& p1, Point& p2, double const& rand_numb)  const {
        double d = distance_squared(p1.position, p2.position);
        /*double d_norm = min_distance / d;
        std::bernoulli_distribution bernoulli(d_norm);
        if (bernoulli(gen)) {
            auto acceleration = normalize_on_second(p1.position, p2.position, std::sqrt(d));
            acceleration.x *= probabilistic_gravity_constant;
            acceleration.y *= probabilistic_gravity_constant;
            p2.speed.x -= acceleration.x * p1.mass;
            p2.speed.y -= acceleration.y * p1.mass;
            p1.speed.x += acceleration.x * p2.mass;
            p1.speed.y += acceleration.y * p2.mass;
        }*/
        if (rand_numb * d < minstd_rand_max) {
            auto acceleration = normalize_on_second(p1.position, p2.position, std::sqrt(d));
            acceleration.x *= gravity_constant;
            acceleration.y *= gravity_constant;
            p2.speed.x -= acceleration.x * p1.mass;
            p2.speed.y -= acceleration.y * p1.mass;
            p1.speed.x += acceleration.x * p2.mass;
            p1.speed.y += acceleration.y * p2.mass;
        }
    }

    void print_stats() {
        //std::cout << "Success rate = " << static_cast<double>(success) / static_cast<double>(total) <<"\n";
    }
};


class GravityParticles : public Particles {
public:
    attractor attr;

    static const unsigned int threads = 2u;
    static const unsigned int cache_line_length = 1u;
    static const double max_minstdrand;
    const std::vector<std::vector<std::pair<size_t, size_t>>> thread_pairs = round_robin(threads*2);
    std::minstd_rand minstd_rands[threads*2u];
    std::size_t sections_start[threads * 2u] = {0};
    std::size_t sections_end[threads * 2u] = { 0 };
    std::thread thread_array[threads*2u];

    GravityParticles(sf::PrimitiveType pt, type t) :
        Particles(pt),
        attr(t)
    {};
    GravityParticles(sf::PrimitiveType pt, std::size_t size, type t) 
        :Particles(pt,size),
        attr(t)
    {
        std::uniform_real_distribution<double> uid(-radius, radius);
        for (std::size_t i = 0; i < vertex_count; ++i) {
            do {
                p_position[i] = { uid(minstd_rands[0]),uid(minstd_rands[0]) };
            } while (p_position[i].x * p_position[i].x + p_position[i].y * p_position[i].y > radius * radius);
        }
        sections_start[0] = 0;
        if (vertex_count <= cache_line_length)
            sections_end[0] = vertex_count;
        else {
            sections_end[0] = static_cast<unsigned int>(vertex_count) / (threads * 2u);
            sections_end[0] = ((sections_end[0]+1) / cache_line_length) * cache_line_length;
            for (unsigned int i = 1; i < threads * 2 && sections_end[i-1]< vertex_count; ++i) {//stupid warning even after the cast 
                sections_end[i] = ((i + 1u) * static_cast<unsigned int>(vertex_count)) / (threads * 2u);
                sections_end[i] = (sections_end[i]/ cache_line_length) * cache_line_length;
                sections_start[i] = sections_end[i - 1];
            }
            if (sections_end[threads * 2 - 1] > vertex_count)
                sections_end[0] = vertex_count;
        }
    }

    void perfect_setup() {
        p_position[0] = { 399.51,399.51 };
        p_position[1] = { 400.49,400.49 };
    }

    void update_multithreading_cross(double& rand_numb, std::size_t a_start, std::size_t a_end, std::size_t b_start, std::size_t b_end) {
        for (std::size_t i = a_start; i < a_end; ++i) {
            for (std::size_t j = b_start; j < b_end; ++j) {
                Point a = Point(p_position[i], p_speed[i], 1);
                Point b = Point(p_position[j], p_speed[j], 1);
                attr(a, b, rand_numb);
            }
        }
    }

    void update_multithreading_cross_classic(std::size_t first_contender, std::size_t second_contender) {
        const std::size_t a_start = sections_start[first_contender];
        const std::size_t a_end = sections_end[first_contender];
        const std::size_t b_start = sections_start[second_contender];
        const std::size_t b_end = sections_end[second_contender];
        for (std::size_t i = a_start; i < a_end; ++i) {
            for (std::size_t j = b_start; j < b_end; ++j) {
                Point a = Point(p_position[i], p_speed[i], 1);
                Point b = Point(p_position[j], p_speed[j], 1);
                attr.classic_gravity_nobranch(a, b);
            }
        }
    }

    void update_multithreading_cross2(std::minstd_rand& minstdrand, std::size_t first_contender, std::size_t second_contender) {
        const std::size_t a_start = sections_start[first_contender];
        const std::size_t a_end = sections_end[first_contender];
        const std::size_t b_start = sections_start[second_contender];
        const std::size_t b_end = sections_end[second_contender];
        for (std::size_t i = a_start; i < a_end; ++i) {
            for (std::size_t j = b_start; j < b_end; ++j) {
                double rand_numb = static_cast<double>(minstdrand());
                Point a = Point(p_position[i], p_speed[i], 1);
                Point b = Point(p_position[j], p_speed[j], 1);
                attr(a, b, rand_numb);
            }
        }
    }

    template<class NormalizedRandomEngine>
    void update_multithreading_cross3(NormalizedRandomEngine& minstdrand, std::size_t first_contender, std::size_t second_contender) {
        const std::size_t a_start = sections_start[first_contender];
        const std::size_t a_end = sections_end[first_contender];
        const std::size_t b_start = sections_start[second_contender];
        const std::size_t b_end = sections_end[second_contender];
        for (std::size_t i = a_start; i < a_end; ++i) {
            for (std::size_t j = b_start; j < b_end; ++j) {
                Point a = Point(p_position[i], p_speed[i], 1);
                Point b = Point(p_position[j], p_speed[j], 1);
                attr.probabilistic_gravity_fastrand(a, b, minstdrand());
            }
        }
    }

    template<class RandomEngine64>
    void update_multithreading_cross4(RandomEngine64& xorshift64, std::size_t first_contender, std::size_t second_contender) {
        const std::size_t a_start = sections_start[first_contender];
        const std::size_t a_end = sections_end[first_contender];
        const std::size_t b_start = sections_start[second_contender];
        const std::size_t b_end = sections_end[second_contender];
        for (std::size_t i = a_start; i < a_end; ++i) {
            for (std::size_t j = b_start; j < b_end; ++j) {
                Point a = Point(p_position[i], p_speed[i], 1);
                Point b = Point(p_position[j], p_speed[j], 1);
                attr.probabilistic_gravity_64(a, b, xorshift64());
            }
        }
    }

    void update_multithreading_own(double& rand_numb, std::size_t a_start, std::size_t a_end) {
        for (std::size_t i = a_start; i < a_end - 1; ++i) {
            for (std::size_t j = i + 1; j < a_end; ++j) {
                Point a = Point(p_position[i], p_speed[i], 1);
                Point b = Point(p_position[j], p_speed[j], 1);
                attr(a, b, rand_numb);
            }
        }
        for (std::size_t i = a_start; i < a_end; ++i) {
            p_position[i].x += p_speed[i].x;
            p_position[i].y += p_speed[i].y;
        }
    }

    void update_multithreading_own_classic(std::size_t first_contender) {
        const std::size_t a_start = sections_start[first_contender];
        const std::size_t a_end = sections_end[first_contender];
        for (std::size_t i = a_start; i < a_end - 1; ++i) {
            for (std::size_t j = i + 1; j < a_end; ++j) {
                Point a = Point(p_position[i], p_speed[i], 1);
                Point b = Point(p_position[j], p_speed[j], 1);
                attr.classic_gravity_nobranch(a, b);
            }
        }
        for (std::size_t i = a_start; i < a_end; ++i) {
            p_position[i].x += p_speed[i].x;
            p_position[i].y += p_speed[i].y;
        }
    }

    void update_multithreading_own2(std::minstd_rand& minstdrand, std::size_t first_contender) {
        const std::size_t a_start = sections_start[first_contender];
        const std::size_t a_end = sections_end[first_contender];
        for (std::size_t i = a_start; i < a_end - 1; ++i) {
            for (std::size_t j = i + 1; j < a_end; ++j) {
                Point a = Point(p_position[i], p_speed[i], 1);
                Point b = Point(p_position[j], p_speed[j], 1);
                attr(a, b, minstdrand());
            }
        }
        for (std::size_t i = a_start; i < a_end; ++i) {
            p_position[i].x += p_speed[i].x;
            p_position[i].y += p_speed[i].y;
        }
    }

    template<class NormalizedRandomEngine>
    void update_multithreading_own3(NormalizedRandomEngine& minstdrand, std::size_t first_contender) {
        const std::size_t a_start = sections_start[first_contender];
        const std::size_t a_end = sections_end[first_contender];
        for (std::size_t i = a_start; i < a_end - 1; ++i) {
            for (std::size_t j = i + 1; j < a_end; ++j) {
                Point a = Point(p_position[i], p_speed[i], 1);
                Point b = Point(p_position[j], p_speed[j], 1);
                attr.probabilistic_gravity_fastrand(a, b, minstdrand());
            }
        }
        for (std::size_t i = a_start; i < a_end; ++i) {
            p_position[i].x += p_speed[i].x;
            p_position[i].y += p_speed[i].y;
        }
    }

    template<class RandomEngine64>
    void update_multithreading_own4(RandomEngine64& xorshift64, std::size_t first_contender) {
        const std::size_t a_start = sections_start[first_contender];
        const std::size_t a_end = sections_end[first_contender];
        for (std::size_t i = a_start; i < a_end - 1; ++i) {
            for (std::size_t j = i + 1; j < a_end; ++j) {
                Point a = Point(p_position[i], p_speed[i], 1);
                Point b = Point(p_position[j], p_speed[j], 1);
                attr.probabilistic_gravity_64(a, b, xorshift64());
            }
        }
        for (std::size_t i = a_start; i < a_end; ++i) {
            p_position[i].x += p_speed[i].x;
            p_position[i].y += p_speed[i].y;
        }
    }

    bool time_to_join = false;
    std::condition_variable main_cv;
    std::condition_variable worker_cv;
    std::mutex main_mutex;
    std::mutex worker_m;
    unsigned int threads_done = 0;
    SafeQueue<std::pair<std::size_t, std::size_t> > pair_queue;

    void wait_work(std::condition_variable& cv, std::mutex& worker_m) {
        std::minstd_rand minstdrand;
        rand65536 minstdrand2;
        xorshift64s xorshift;
        rand_normalizer64<xorshift64> norm_xorshift;
        rand_normalizer32<std::minstd_rand> norm_minrand;
        do {
            std::unique_lock<std::mutex> lck(worker_m);
            cv.wait(lck, [&]() { return (pair_queue.size() > 0) || time_to_join; });
            if (time_to_join) return;
            auto p = pair_queue.pop();
            cv.notify_one();

            if (p.first!=p.second) 
                update_multithreading_cross_classic(p.first, p.second);
                //update_multithreading_cross3(minstdrand2, p.first, p.second);
            else
                update_multithreading_own_classic(p.first);
                //update_multithreading_own3(minstdrand2, p.first);

            {
                std::scoped_lock lck(main_mutex);
                ++threads_done;
            }
            main_cv.notify_one();
        } while (!time_to_join); //data race
    }

    void start_work() {
        for (unsigned int i=0; i<threads*2; ++i)
            thread_array[i] = std::thread(&GravityParticles::wait_work, this, std::ref(worker_cv), std::ref(worker_m));
    }

    void continue_work() {
        for (const auto& q : thread_pairs) {
            pair_queue.push(q);
            worker_cv.notify_one();
            std::unique_lock<std::mutex> lck(main_mutex);
            main_cv.wait(lck, [&]() {return threads_done >= q.size(); });
            threads_done = 0;
        };
    }

    void stop_work() {
        {
            std::scoped_lock lck(worker_m);
            time_to_join = true;
        }
        worker_cv.notify_all();
        for (unsigned int i = 0; i < threads * 2; ++i)
            if (thread_array[i].joinable()) thread_array[i].join();
    }

    void update() {
        for (std::size_t i = 0; i < vertex_count; ++i) {
            for (std::size_t j = i + 1; j < vertex_count; ++j) {
                Point a = Point(p_position[i], p_speed[i], 1);
                Point b = Point(p_position[j], p_speed[j], 1);

                attr(a, b, minstd_rands[0]());
            }
        }
        for (std::size_t i = 0; i < vertex_count; ++i) {
            p_position[i].x += p_speed[i].x;
            p_position[i].y += p_speed[i].y;
        }
    }

    void print() {
        std::cout << std::setiosflags(std::ios_base::scientific);
        std::cout << std::setprecision(3);
        for (std::size_t i = 0; i < vertex_count; ++i) {
            Point a = Point(p_position[i], p_speed[i], 1);
            std::cout << "{"<<i<<","<<a.speed.x<<","<<a.speed.y<<"}";
        }
        std::cout << "\n";
    }
};


const double GravityParticles::max_minstdrand = { static_cast<double>(std::minstd_rand::max()) };
/*const std::vector<std::initializer_list<std::pair<size_t, size_t>>> thread_pairs = std::vector<std::initializer_list<std::pair<size_t, size_t>>> {
    std::initializer_list<std::pair<size_t, size_t>>{ std::pair<std::size_t,std::size_t>(0,1), std::pair<std::size_t,std::size_t>(2,3) },
    std::initializer_list<std::pair<size_t, size_t>>{ std::pair<std::size_t,std::size_t>(0,2), std::pair<std::size_t,std::size_t>(1,3) },
    std::initializer_list<std::pair<size_t, size_t>>{ std::pair<std::size_t,std::size_t>(0,3), std::pair<std::size_t,std::size_t>(1,2) },
    std::initializer_list<std::pair<size_t, size_t>>{ std::pair<std::size_t,std::size_t>(0,0), std::pair<std::size_t,std::size_t>(1,1), std::pair<std::size_t, std::size_t>(2, 2), std::pair<std::size_t, std::size_t>(3, 3) }
};*/


/*
bi tree
O(n) check all points to see how big the rectangle around 0,0 is

*/